package com.dx.demi.archdiary.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dx.demi.archdiary.bean.Staff;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STAFF".
*/
public class StaffDao extends AbstractDao<Staff, Long> {

    public static final String TABLENAME = "STAFF";

    /**
     * Properties of entity Staff.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, Long.class, "pid", false, "PID");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Age = new Property(3, int.class, "age", false, "age");
        public final static Property Salary = new Property(4, double.class, "salary", false, "salary");
        public final static Property Level = new Property(5, String.class, "level", false, "level");
        public final static Property Money = new Property(6, double.class, "money", false, "money");
    }

    private DaoSession daoSession;

    private Query<Staff> project_MStaffsQuery;

    public StaffDao(DaoConfig config) {
        super(config);
    }
    
    public StaffDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STAFF\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PID\" INTEGER," + // 1: pid
                "\"name\" TEXT," + // 2: name
                "\"age\" INTEGER NOT NULL ," + // 3: age
                "\"salary\" REAL NOT NULL ," + // 4: salary
                "\"level\" TEXT," + // 5: level
                "\"money\" REAL NOT NULL );"); // 6: money
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STAFF\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(2, pid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getAge());
        stmt.bindDouble(5, entity.getSalary());
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(6, level);
        }
        stmt.bindDouble(7, entity.getMoney());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(2, pid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getAge());
        stmt.bindDouble(5, entity.getSalary());
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(6, level);
        }
        stmt.bindDouble(7, entity.getMoney());
    }

    @Override
    protected final void attachEntity(Staff entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Staff readEntity(Cursor cursor, int offset) {
        Staff entity = new Staff( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // age
            cursor.getDouble(offset + 4), // salary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // level
            cursor.getDouble(offset + 6) // money
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Staff entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.getInt(offset + 3));
        entity.setSalary(cursor.getDouble(offset + 4));
        entity.setLevel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMoney(cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Staff entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Staff entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Staff entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mStaffs" to-many relationship of Project. */
    public List<Staff> _queryProject_MStaffs(Long pid) {
        synchronized (this) {
            if (project_MStaffsQuery == null) {
                QueryBuilder<Staff> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pid.eq(null));
                project_MStaffsQuery = queryBuilder.build();
            }
        }
        Query<Staff> query = project_MStaffsQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

}
