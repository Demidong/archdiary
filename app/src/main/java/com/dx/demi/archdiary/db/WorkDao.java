package com.dx.demi.archdiary.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dx.demi.archdiary.bean.Work;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORK".
*/
public class WorkDao extends AbstractDao<Work, Long> {

    public static final String TABLENAME = "WORK";

    /**
     * Properties of entity Work.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, Long.class, "sid", false, "SID");
        public final static Property Daytime = new Property(2, String.class, "daytime", false, "daytime");
        public final static Property Duration = new Property(3, String.class, "duration", false, "duration");
        public final static Property Money = new Property(4, double.class, "money", false, "money");
    }

    private Query<Work> staff_MWorksQuery;

    public WorkDao(DaoConfig config) {
        super(config);
    }
    
    public WorkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SID\" INTEGER," + // 1: sid
                "\"daytime\" TEXT," + // 2: daytime
                "\"duration\" TEXT," + // 3: duration
                "\"money\" REAL NOT NULL );"); // 4: money
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Work entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(2, sid);
        }
 
        String daytime = entity.getDaytime();
        if (daytime != null) {
            stmt.bindString(3, daytime);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
        stmt.bindDouble(5, entity.getMoney());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Work entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(2, sid);
        }
 
        String daytime = entity.getDaytime();
        if (daytime != null) {
            stmt.bindString(3, daytime);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
        stmt.bindDouble(5, entity.getMoney());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Work readEntity(Cursor cursor, int offset) {
        Work entity = new Work( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // daytime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // duration
            cursor.getDouble(offset + 4) // money
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Work entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDaytime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMoney(cursor.getDouble(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Work entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Work entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Work entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mWorks" to-many relationship of Staff. */
    public List<Work> _queryStaff_MWorks(Long sid) {
        synchronized (this) {
            if (staff_MWorksQuery == null) {
                QueryBuilder<Work> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sid.eq(null));
                staff_MWorksQuery = queryBuilder.build();
            }
        }
        Query<Work> query = staff_MWorksQuery.forCurrentThread();
        query.setParameter(0, sid);
        return query.list();
    }

}
